// Code generated by goa v3.11.3, DO NOT EDIT.
//
// diary service
//
// Command:
// $ goa gen github.com/shibayu36/go-diary-api/design

package diary

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the diary service interface.
type Service interface {
	// UserSignup implements UserSignup.
	UserSignup(context.Context, *UserSignupPayload) (err error)
	// Creates a valid API token
	Signin(context.Context, *SigninPayload) (res string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "diary"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"UserSignup", "Signin"}

// SigninPayload is the payload type of the diary service Signin method.
type SigninPayload struct {
	// User email
	Email string
}

// UserSignupPayload is the payload type of the diary service UserSignup method.
type UserSignupPayload struct {
	// User name
	Name string
	// User email
	Email string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeUserValidationError builds a goa.ServiceError from an error.
func MakeUserValidationError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "user_validation_error", false, false, false)
}

// MakeUserDuplicationError builds a goa.ServiceError from an error.
func MakeUserDuplicationError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "user_duplication_error", false, false, false)
}
