// Code generated by goa v3.11.3, DO NOT EDIT.
//
// diary HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/shibayu36/go-diary-api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	diary "github.com/shibayu36/go-diary-api/gen/diary"
	goahttp "goa.design/goa/v3/http"
)

// BuildUserSignupRequest instantiates a HTTP request object with method and
// path set to call the "diary" service "UserSignup" endpoint
func (c *Client) BuildUserSignupRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UserSignupDiaryPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("diary", "UserSignup", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUserSignupRequest returns an encoder for requests sent to the diary
// UserSignup server.
func EncodeUserSignupRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*diary.UserSignupPayload)
		if !ok {
			return goahttp.ErrInvalidType("diary", "UserSignup", "*diary.UserSignupPayload", v)
		}
		body := NewUserSignupRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("diary", "UserSignup", err)
		}
		return nil
	}
}

// DecodeUserSignupResponse returns a decoder for responses returned by the
// diary UserSignup endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUserSignupResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("diary", "UserSignup", resp.StatusCode, string(body))
		}
	}
}

// BuildSigninRequest instantiates a HTTP request object with method and path
// set to call the "diary" service "Signin" endpoint
func (c *Client) BuildSigninRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SigninDiaryPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("diary", "Signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSigninRequest returns an encoder for requests sent to the diary Signin
// server.
func EncodeSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*diary.SigninPayload)
		if !ok {
			return goahttp.ErrInvalidType("diary", "Signin", "*diary.SigninPayload", v)
		}
		body := NewSigninRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("diary", "Signin", err)
		}
		return nil
	}
}

// DecodeSigninResponse returns a decoder for responses returned by the diary
// Signin endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("diary", "Signin", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("diary", "Signin", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDiaryRequest instantiates a HTTP request object with method and
// path set to call the "diary" service "CreateDiary" endpoint
func (c *Client) BuildCreateDiaryRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		userName string
	)
	{
		p, ok := v.(*diary.CreateDiaryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("diary", "CreateDiary", "*diary.CreateDiaryPayload", v)
		}
		if p.UserName != nil {
			userName = *p.UserName
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDiaryDiaryPath(userName)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("diary", "CreateDiary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDiaryRequest returns an encoder for requests sent to the diary
// CreateDiary server.
func EncodeCreateDiaryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*diary.CreateDiaryPayload)
		if !ok {
			return goahttp.ErrInvalidType("diary", "CreateDiary", "*diary.CreateDiaryPayload", v)
		}
		if p.Key != nil {
			head := *p.Key
			req.Header.Set("Authorization", head)
		}
		body := NewCreateDiaryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("diary", "CreateDiary", err)
		}
		return nil
	}
}

// DecodeCreateDiaryResponse returns a decoder for responses returned by the
// diary CreateDiary endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateDiaryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("diary", "CreateDiary", resp.StatusCode, string(body))
		}
	}
}
