// Code generated by goa v3.11.3, DO NOT EDIT.
//
// diary HTTP client CLI support package
//
// Command:
// $ goa gen github.com/shibayu36/go-diary-api/design

package client

import (
	"encoding/json"
	"fmt"

	diary "github.com/shibayu36/go-diary-api/gen/diary"
)

// BuildUserSignupPayload builds the payload for the diary UserSignup endpoint
// from CLI flags.
func BuildUserSignupPayload(diaryUserSignupBody string) (*diary.UserSignupPayload, error) {
	var err error
	var body UserSignupRequestBody
	{
		err = json.Unmarshal([]byte(diaryUserSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Et repellendus ullam autem.\",\n      \"name\": \"Corrupti necessitatibus iure.\"\n   }'")
		}
	}
	v := &diary.UserSignupPayload{
		Name:  body.Name,
		Email: body.Email,
	}

	return v, nil
}

// BuildSigninPayload builds the payload for the diary Signin endpoint from CLI
// flags.
func BuildSigninPayload(diarySigninBody string) (*diary.SigninPayload, error) {
	var err error
	var body SigninRequestBody
	{
		err = json.Unmarshal([]byte(diarySigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Qui id hic vel est.\"\n   }'")
		}
	}
	v := &diary.SigninPayload{
		Email: body.Email,
	}

	return v, nil
}

// BuildCreateDiaryPayload builds the payload for the diary CreateDiary
// endpoint from CLI flags.
func BuildCreateDiaryPayload(diaryCreateDiaryBody string, diaryCreateDiaryUserName string, diaryCreateDiaryKey string) (*diary.CreateDiaryPayload, error) {
	var err error
	var body CreateDiaryRequestBody
	{
		err = json.Unmarshal([]byte(diaryCreateDiaryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"title\": \"Facilis cum laudantium sit rerum.\"\n   }'")
		}
	}
	var userName string
	{
		userName = diaryCreateDiaryUserName
	}
	var key *string
	{
		if diaryCreateDiaryKey != "" {
			key = &diaryCreateDiaryKey
		}
	}
	v := &diary.CreateDiaryPayload{
		Title: body.Title,
	}
	v.UserName = &userName
	v.Key = key

	return v, nil
}
