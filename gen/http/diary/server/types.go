// Code generated by goa v3.11.3, DO NOT EDIT.
//
// diary HTTP server types
//
// Command:
// $ goa gen github.com/shibayu36/go-diary-api/design

package server

import (
	diary "github.com/shibayu36/go-diary-api/gen/diary"
	goa "goa.design/goa/v3/pkg"
)

// UserSignupRequestBody is the type of the "diary" service "UserSignup"
// endpoint HTTP request body.
type UserSignupRequestBody struct {
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// SigninRequestBody is the type of the "diary" service "Signin" endpoint HTTP
// request body.
type SigninRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// CreateDiaryRequestBody is the type of the "diary" service "CreateDiary"
// endpoint HTTP request body.
type CreateDiaryRequestBody struct {
	// Diary title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// NewUserSignupPayload builds a diary service UserSignup endpoint payload.
func NewUserSignupPayload(body *UserSignupRequestBody) *diary.UserSignupPayload {
	v := &diary.UserSignupPayload{
		Name:  *body.Name,
		Email: *body.Email,
	}

	return v
}

// NewSigninPayload builds a diary service Signin endpoint payload.
func NewSigninPayload(body *SigninRequestBody) *diary.SigninPayload {
	v := &diary.SigninPayload{
		Email: *body.Email,
	}

	return v
}

// NewCreateDiaryPayload builds a diary service CreateDiary endpoint payload.
func NewCreateDiaryPayload(body *CreateDiaryRequestBody, userName string, key *string) *diary.CreateDiaryPayload {
	v := &diary.CreateDiaryPayload{
		Title: *body.Title,
	}
	v.UserName = &userName
	v.Key = key

	return v
}

// ValidateUserSignupRequestBody runs the validations defined on
// UserSignupRequestBody
func ValidateUserSignupRequestBody(body *UserSignupRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateSigninRequestBody runs the validations defined on SigninRequestBody
func ValidateSigninRequestBody(body *SigninRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateCreateDiaryRequestBody runs the validations defined on
// CreateDiaryRequestBody
func ValidateCreateDiaryRequestBody(body *CreateDiaryRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}
