// Code generated by goa v3.11.3, DO NOT EDIT.
//
// diary HTTP client CLI support package
//
// Command:
// $ goa gen github.com/shibayu36/go-diary-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	diaryc "github.com/shibayu36/go-diary-api/gen/http/diary/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `diary (user-signup|signin|create-diary)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` diary user-signup --body '{
      "email": "Et repellendus ullam autem.",
      "name": "Corrupti necessitatibus iure."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		diaryFlags = flag.NewFlagSet("diary", flag.ContinueOnError)

		diaryUserSignupFlags    = flag.NewFlagSet("user-signup", flag.ExitOnError)
		diaryUserSignupBodyFlag = diaryUserSignupFlags.String("body", "REQUIRED", "")

		diarySigninFlags    = flag.NewFlagSet("signin", flag.ExitOnError)
		diarySigninBodyFlag = diarySigninFlags.String("body", "REQUIRED", "")

		diaryCreateDiaryFlags        = flag.NewFlagSet("create-diary", flag.ExitOnError)
		diaryCreateDiaryBodyFlag     = diaryCreateDiaryFlags.String("body", "REQUIRED", "")
		diaryCreateDiaryUserNameFlag = diaryCreateDiaryFlags.String("user-name", "REQUIRED", "User name")
		diaryCreateDiaryKeyFlag      = diaryCreateDiaryFlags.String("key", "", "")
	)
	diaryFlags.Usage = diaryUsage
	diaryUserSignupFlags.Usage = diaryUserSignupUsage
	diarySigninFlags.Usage = diarySigninUsage
	diaryCreateDiaryFlags.Usage = diaryCreateDiaryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "diary":
			svcf = diaryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "diary":
			switch epn {
			case "user-signup":
				epf = diaryUserSignupFlags

			case "signin":
				epf = diarySigninFlags

			case "create-diary":
				epf = diaryCreateDiaryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "diary":
			c := diaryc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "user-signup":
				endpoint = c.UserSignup()
				data, err = diaryc.BuildUserSignupPayload(*diaryUserSignupBodyFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = diaryc.BuildSigninPayload(*diarySigninBodyFlag)
			case "create-diary":
				endpoint = c.CreateDiary()
				data, err = diaryc.BuildCreateDiaryPayload(*diaryCreateDiaryBodyFlag, *diaryCreateDiaryUserNameFlag, *diaryCreateDiaryKeyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// diaryUsage displays the usage of the diary command and its subcommands.
func diaryUsage() {
	fmt.Fprintf(os.Stderr, `Service is the diary service interface.
Usage:
    %[1]s [globalflags] diary COMMAND [flags]

COMMAND:
    user-signup: UserSignup implements UserSignup.
    signin: Creates a valid API token
    create-diary: Creates a diary

Additional help:
    %[1]s diary COMMAND --help
`, os.Args[0])
}
func diaryUserSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] diary user-signup -body JSON

UserSignup implements UserSignup.
    -body JSON: 

Example:
    %[1]s diary user-signup --body '{
      "email": "Et repellendus ullam autem.",
      "name": "Corrupti necessitatibus iure."
   }'
`, os.Args[0])
}

func diarySigninUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] diary signin -body JSON

Creates a valid API token
    -body JSON: 

Example:
    %[1]s diary signin --body '{
      "email": "Qui id hic vel est."
   }'
`, os.Args[0])
}

func diaryCreateDiaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] diary create-diary -body JSON -user-name STRING -key STRING

Creates a diary
    -body JSON: 
    -user-name STRING: User name
    -key STRING: 

Example:
    %[1]s diary create-diary --body '{
      "title": "Facilis cum laudantium sit rerum."
   }' --user-name "Rem explicabo quo harum molestias facere." --key "Unde consequatur."
`, os.Args[0])
}
